"""
Django settings for DevWorksAccount project.

Generated by 'django-admin startproject' using Django 5.2.5.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""
import logging
import os
from corsheaders.defaults import default_headers
from pythonjsonlogger import jsonlogger
from datetime import datetime, timezone
from devworks_mail.AdminEncryptEmailBackend import verify_admin_encrypted_emails

from DevWorksAccount.configuration_parser import Configs

BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

config = Configs(
    os.environ.get(
        'CONFIGURATION_FILE',
        os.path.join(BASE_DIR, 'local.overrides.yaml')
    )
)

VERSION = config.str("VERSION")
DEBUG = config.bool("DEBUG")

SECRET_KEY = config.str("SECRET_KEY")

class AddGaeSeverityLevel(logging.Filter):
    def filter(self, record):
        record.severity = record.levelname
        return True

class CustomJsonFormatter(jsonlogger.JsonFormatter):
    def add_fields(self, log_record, record, message_dict):
        super(CustomJsonFormatter, self).add_fields(log_record, record, message_dict)
        if not log_record.get('timestamp'):
            now = datetime.now(timezone.utc).strftime('%Y-%m-%dT%H:%M:%S.%fZ')
            log_record['timestamp'] = now
        if hasattr(record, "name"):
            log_record['name'] = record.name
        if log_record.get('level'):
            log_record['level'] = log_record['level'].upper()
        else:
            log_record['level'] = record.levelname
        return log_record

LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "filters": {
        "add_gae_log_level": {"()": "DevWorksAccount.settings.AddGaeSeverityLevel"},
        'request_id': {'()': 'log_request_id.filters.RequestIDFilter'}
    },
    "formatters": {
        "json": {"()": "DevWorksAccount.settings.CustomJsonFormatter"}
    },
    "handlers": {
        "console": {
            "class": "logging.StreamHandler",
            "formatter": "json",
            "filters": ["request_id", "add_gae_log_level"],
        },
        "console-noid": {
            "class": "logging.StreamHandler",
            "formatter": "json",
            "filters": ["add_gae_log_level"],
        }
    },
    "loggers": {
        '': {
            'handlers': ['console'],
            'level': 'DEBUG' if DEBUG else 'INFO',
        },
        'oauthlib': {
            'handlers': ['console'],
            'level': 'INFO',
        },
        'requests': {
            'handlers': ['console'],
            'level': 'INFO',
        },
        'requests_oauthlib': {
            'handlers': ['console'],
            'level': 'INFO',
        },
        'boto3': {
            'handlers': ['console'],
            'level': 'INFO',
        },
        'botocore': {
            'handlers': ['console'],
            'level': 'INFO',
        },
        'elasticsearch': {
            'handlers': ['console'],
            'level': 'INFO',
            'propagate': False
        },
        'urllib3': {
            'handlers': ['console'],
            'level': 'INFO',
        },
        'celery': {
            'handlers': ['console'],
            'level': 'INFO',
            'propagate': False,
        },
        'kombu': {
            'handlers': ['console'],
            'level': 'INFO',
            'propagate': False,
        },
        'gunicorn': {
            'level': 'INFO',
            'propagate': False,
            'handlers': ['console-noid'],
        }
    }
}

ALLOWED_HOSTS = config.json('ALLOWED_HOSTS', [])

CORS_ALLOW_METHODS = ['GET', 'POST', 'PUT', 'PATCH', 'DELETE', 'OPTIONS']
CORS_ALLOWED_ORIGINS = config.json('CORS_ALLOWED_ORIGINS', default=[])
CORS_ALLOW_HEADERS = [
    *default_headers,
    'Content-Security-Policy',
    'cache-control',
    'expires',
    'pragma'
]

CORS_ALLOW_CREDENTIALS = True
CORS_ALLOW_ALL_ORIGINS = True

# Application definition

INSTALLED_APPS = [
    'log_request_id',
    'django_password_validators',
    'django_password_validators.password_history',
    'crispy_forms',
    'crispy_bootstrap5',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'social_django',
    'django_extensions',
    'corsheaders',
    'rest_framework',
    'core.apps.CoreConfig',
    'apps.login.apps.ClientConfig',
    'apps.account.apps.AccountConfig',
    'apps.client.apps.ClientConfig',
    'apps.api.apps.ApiConfig',
]

MIDDLEWARE = [
    'log_request_id.middleware.RequestIDMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'devworks_django.ForceLogout.Middleware',
    'devworks_django.PasswordChange.Middleware',
    'apps.login.idp_pipeline.middleware.SocialAuthMiddleware',
    'social_django.middleware.SocialAuthExceptionMiddleware',
]

ROOT_URLCONF = 'DevWorksAccount.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'social_django.context_processors.backends',
                'social_django.context_processors.login_redirect',
            ],
        },
    },
]

LOG_REQUEST_ID_HEADER = 'HTTP_X_REQUEST_ID'

WSGI_APPLICATION = 'DevWorksAccount.wsgi.application'

# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': config.str('DB_NAME'),
        'USER': config.str('DB_USER'),
        'PASSWORD': config.str('DB_PASS'),
        'HOST': config.str('DB_HOST'),
        'PORT': config.str('DB_PORT'),
    }
}

# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'DevWorksAccount.password_validation.GDRPValidator',
        'OPTIONS': {
            'min_digits': 1,
            'min_upper': 1,
            'min_lower': 1,
            'min_special': 1
        }
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = 'static/'
STATICFILES_DIRS = [
    os.path.join(BASE_DIR, 'static'),  # Directory for additional static files
]

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'


REST_FRAMEWORK = {
    'DEFAULT_PERMISSION_CLASSES': (
        'devworks_drf.permission.drf_permissions.TokenOrStaffUser',
        'devworks_drf.permission.drf_permissions.UserCheck'
    ),
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'devworks_drf.oidc.RemoteService',
        'rest_framework.authentication.SessionAuthentication',
    ),
}

HYDRA_PUBLIC_URL = config.str('HYDRA_PUBLIC_URL')
HYDRA_ADMIN_URL = config.str('HYDRA_ADMIN_URL')

OIDC_AUTH = {
    # Audiences your tokens must have (Hydra's client_id usually goes here)
    'audiences': ["development"],

    'login': {
        # Hydra's token introspection admin endpoint
        'admin': f"{HYDRA_ADMIN_URL}/admin/oauth2/introspect",
    },
}

# If you're calling a userinfo endpoint, set it; otherwise 'local'
USERINFO_URL = config.str('USERINFO_URL')


# Hydra
# Path to your Hydra CA cert so requests verifies it
# HYDRA_CA_CERT = config.str('HYDRA_CA_CERT')

HYDRA_ADMIN_TLS_TERMINATION = True


FIELD_ENCRYPTION_KEY = config.str('FIELD_ENCRYPTION_KEY')

AUTH_USER_MODEL = "account.UserProfile"

# Crispy Forms
CRISPY_ALLOWED_TEMPLATE_PACKS = "bootstrap5"
CRISPY_TEMPLATE_PACK = 'bootstrap5'

#
# if config.bool('DEBUG'):
# EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
# else:
EMAIL_BACKEND = 'devworks_mail.AdminEncryptEmailBackend.AdminEncryptEmailBackend'



CSRF_TRUSTED_ORIGINS = ["https://localhost:8000"]

# LOGIN_REDIRECT_URL = config.str('LOGIN_REDIRECT_URL')
LOGIN_REDIRECT_URL = '/'
LOGIN_URL = '/login/'
LOGOUT_REDIRECT_URL = '/'

SESSION_COOKIE_SECURE = True
CSRF_COOKIE_SECURE = True
SESSION_COOKIE_SAMESITE = 'none'


# Redis Cache Configuration
CACHES = {
    'default': {
        'BACKEND': 'django_redis.cache.RedisCache',
        'LOCATION': f"{config.str('REDIS_LOCATION')}/1",
        'OPTIONS': {
            'CLIENT_CLASS': 'django_redis.client.DefaultClient',
            "PICKLE_VERSION": 4,
        },
        'KEY_PREFIX': 'django_cache'
    }
}


SESSION_ENGINE = "django.contrib.sessions.backends.cache"
SESSION_CACHE_ALIAS = "default"
RATELIMIT_USE_CACHE = 'default'

CSP_CONNECT_SRC = (
    "'self'",
    "https://10.0.0.215:4444",
    "https://localhost:8000",
    "https://10.0.0.215:8000",
    "ws://localhost:3000",
    "wss://localhost:3000",
    "ws://10.0.0.215:3000",
    "wss://10.0.0.215:3000",
)
CSP_FORM_ACTION = (
    "'self'",
)

OAUTH_NO_CONSENT_NECESSARY = []


# IDP Login
IDP_GITHUB_KEY = config.str('IDP_GITHUB_KEY')
IDP_GOOGLE_KEY = config.str('IDP_GOOGLE_KEY')

AUTHENTICATION_BACKENDS = ("django.contrib.auth.backends.ModelBackend",)


EMAIL_HOST = "smtp.gmail.com"
EMAIL_PORT = 587
EMAIL_USE_TLS = True

EMAIL_HOST_USER = config.str('EMAIL_HOST_USER')
EMAIL_HOST_PASSWORD = config.str('EMAIL_HOST_PASSWORD')

verify_admin_encrypted_emails()


if IDP_GOOGLE_KEY:
    AUTHENTICATION_BACKENDS = AUTHENTICATION_BACKENDS + ('apps.login.utils.GoogleOAuth2.GoogleAuthOverride',)

if IDP_GITHUB_KEY:
    AUTHENTICATION_BACKENDS = AUTHENTICATION_BACKENDS + ('apps.login.utils.GithubOAuth2.GithubAuthOverride',)


SOCIAL_AUTH_GOOGLE_OAUTH2_KEY = IDP_GOOGLE_KEY
SOCIAL_AUTH_GOOGLE_OAUTH2_SECRET = config.str('IDP_GOOGLE_SECRET')
SOCIAL_AUTH_GOOGLE_OAUTH2_SCOPE = ['email', ]
SOCIAL_AUTH_GOOGLE_OAUTH2_AUTH_EXTRA_ARGUMENTS = {
    'access_type': 'offline'
}

SOCIAL_AUTH_PIPELINE = (
    'social_core.pipeline.social_auth.social_details',
    'apps.login.idp_pipeline.social_auth.social_uid',
    'social_core.pipeline.social_auth.auth_allowed',
    'social_core.pipeline.social_auth.social_user',
    'apps.login.idp_pipeline.social_auth.get_username',
    'apps.login.idp_pipeline.social_auth.associate_login',
    'apps.login.views.login.welcome',
    'apps.login.idp_pipeline.social_auth.create_user',
    'social_core.pipeline.social_auth.associate_user',
    'social_core.pipeline.user.user_details',
    'social_core.pipeline.social_auth.load_extra_data',
)

SOCIAL_AUTH_NAMES = {
    'github': 'Github',
    'google-oauth2': 'Google'
}

SOCIAL_AUTH_ICONS = {
    'github': 'fa-github',
    'google-oauth2': 'fa-google'
}

CUSTOM_CERT = config.str('CUSTOM_CERT')


AUDIENCE_THEMES = {
    "development": {
        "name": "Development",
        "logo_url": "img/dev_works.svg",
    }
}


